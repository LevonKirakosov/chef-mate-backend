/*
 * –§–∞–π–ª: server.js
 * –û–ø–∏—Å–∞–Ω–∏–µ: –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è v8.
 * –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞, –∑–∞–≥—Ä—É–∑–∫–∞ PDF, —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
 */

// --- 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
const express = require("express");
const bodyParser = require("body-parser");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const fs = require("fs");
const multer = require("multer");
const pdfParse = require("pdf-parse");

// --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const app = express();
app.use(bodyParser.json());

const token = process.env.TELEGRAM_TOKEN;
if (!token) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  process.exit(1);
}

const bot = new TelegramBot(token, { polling: false });
const webhookPath = `/telegram/webhook/${token}`;
const upload = multer({ dest: "uploads/" });
const LOG_FILE = "kitchen_log.txt";

// --- 3. –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö –∏ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
let dynamicMenu = {};
// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–Ω—é –∏–∑ —Ñ–∞–π–ª–∞
if (fs.existsSync("menu.json")) {
    try {
        dynamicMenu = JSON.parse(fs.readFileSync("menu.json"));
        console.log(">>> [INFO] –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑ menu.json");
    } catch (error) {
        console.error(">>> [ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è menu.json:", error);
    }
}

const KITCHEN_CHAT_ID = '-1002389108118';
const MANAGER_TELEGRAM_ID = '2553122118';

let lineCheckState = { confirmed: false, confirmedBy: null, confirmedAt: null };
let shiftState = { open: false, openedBy: null, openedAt: null };

// --- 4. –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function getReplyOptions(msg) {
    const options = { parse_mode: 'Markdown' };
    if (msg?.is_topic_message && msg?.message_thread_id) {
        options.message_thread_id = msg.message_thread_id;
    }
    return options;
}

function logEvent(event) {
    const time = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    const logMessage = `[${time}] ${event}\n`;
    fs.appendFileSync(LOG_FILE, logMessage);
    console.log(logMessage.trim());
}

// --- 5. –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Telegram ---

app.post(webhookPath, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Å–ª–æ–≤—É "–®–µ—Ñ"
bot.onText(/^—à–µ—Ñ/i, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–ü–æ–≤–∞—Ä';
  const welcomeMessage = `*–°–ª—É—à–∞—é –≤–∞—Å, ${userName}!* üë®‚Äçüç≥\n\n–Ø –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—É-—à–µ—Ñ *Chef-Mate*. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–¥–µ–ª–∞—Ç—å –∫—É—Ö–Ω—é –æ–±—Ä–∞–∑—Ü–æ–≤–æ–π!\n\nüöÄ *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*`;
  const options = getReplyOptions(msg);
  options.reply_markup = {
      inline_keyboard: [
          [{ text: 'üìã –õ–∞–π–Ω-—á–µ–∫', callback_data: 'line_check' }],
          [{ text: 'üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç', callback_data: 'send_photo_report' }],
          [{ text: 'üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'send_request' }],
          [{ text: 'üîì –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã', callback_data: 'open_shift' }, { text: 'üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã', callback_data: 'close_shift' }],
          [{ text: 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'show_today_menu' }],
          [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω—ã', callback_data: 'show_stats' }]
      ]
  };
  bot.sendMessage(chatId, welcomeMessage, options);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (PDF)
bot.on('document', async (msg) => {
    if (msg.document.mime_type !== 'application/pdf') return;
    
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, "‚è≥ –ü–æ–ª—É—á–∏–ª PDF, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...");

    try {
        const fileId = msg.document.file_id;
        const fileLink = await bot.getFileLink(fileId);
        const response = await fetch(fileLink);
        const buffer = await response.arrayBuffer();
        const data = await pdfParse(Buffer.from(buffer));

        const lines = data.text.split('\n').filter(l => l.trim().length > 3);
        const dishes = lines.map(line => ({ name: line.trim(), description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" }));

        if (dishes.length === 0) {
            bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–∞ –≤ PDF. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥–æ–µ –±–ª—é–¥–æ –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.");
            return;
        }

        const todayKey = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
        dynamicMenu[todayKey] = { name: `–ò–º–ø–æ—Ä—Ç –∏–∑ PDF –æ—Ç ${new Date().toLocaleDateString('ru-RU')}`, dishes: dishes };
        fs.writeFileSync("menu.json", JSON.stringify(dynamicMenu, null, 2));
        logEvent(`[MENU] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.first_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª ${dishes.length} –±–ª—é–¥ –Ω–∞ ${todayKey} —á–µ—Ä–µ–∑ PDF.`);

        bot.sendMessage(chatId, `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ *${dishes.length}* –±–ª—é–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`, {parse_mode: 'Markdown'});
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF:", error);
        bot.sendMessage(chatId, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞.");
    }
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏
bot.on('callback_query', (cb) => {
    const msg = cb.message;
    const data = cb.data;
    const chatId = msg.chat.id;
    const options = getReplyOptions(msg);
    const user = cb.from.first_name;

    if (data === 'show_today_menu') {
        const todayKey = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
        const menu = dynamicMenu[todayKey];
        if (!menu || !menu.dishes) {
            bot.sendMessage(chatId, '‚ùó –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.', options);
        } else {
            let text = `üìñ *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî ${menu.name}*\n\n`;
            menu.dishes.forEach(b => {
                text += `üçΩÔ∏è *${b.name}*\n_${b.description}_\n\n`;
            });
            bot.sendMessage(chatId, text, options);
        }
    } else if (data === 'open_shift') {
        shiftState = { open: true, openedBy: user, openedAt: new Date() };
        logEvent(`[SHIFT] –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user}.`);
        bot.sendMessage(chatId, `‚úÖ –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ *${shiftState.openedAt.toLocaleTimeString('ru-RU')}*. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${user}.`, options);
    } else if (data === 'close_shift') {
        if (!shiftState.open) {
            bot.answerCallbackQuery(cb.id, { text: "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert: true });
            return;
        }
        const duration = Math.round((new Date() - shiftState.openedAt) / 1000 / 60); // in minutes
        logEvent(`[SHIFT] –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user}. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω.`);
        bot.sendMessage(chatId, `üîí –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!`, options);
        shiftState.open = false;
    } else {
        bot.sendMessage(chatId, `–§—É–Ω–∫—Ü–∏—è "${data}" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, options);
    }

    bot.answerCallbackQuery(cb.id);
});

// --- 6. –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫) ---
// (–õ–æ–≥–∏–∫–∞ cron –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π, –Ω–æ —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –º–µ–Ω—é)

// --- 7. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
const listener = app.listen(process.env.PORT || 3000, () => {
  console.log("Chef-Mate v8 (–î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é) –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É " + listener.address().port);
});
