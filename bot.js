/*
 * –§–∞–π–ª: bot.js
 * –í–µ—Ä—Å–∏—è: v9 - –ú–æ–¥—É–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
 * –û–ø–∏—Å–∞–Ω–∏–µ: –í—Å—è –ª–æ–≥–∏–∫–∞ Telegram-–±–æ—Ç–∞, –≤–∫–ª—é—á–∞—è –∫–æ–º–∞–Ω–¥—ã, –∫–Ω–æ–ø–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
 */

const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const fs = require("fs");

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã ---
const LOG_FILE = "kitchen_log.txt";
const MENU_FILE = "menu.json";
const STATE_FILE = "state.json";

// --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
let dynamicMenu = {};
if (fs.existsSync(MENU_FILE)) {
    try {
        dynamicMenu = JSON.parse(fs.readFileSync(MENU_FILE));
        console.log(">>> [INFO] –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –º–µ–Ω—é —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.");
    } catch (error) {
        console.error(">>> [ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è menu.json:", error);
    }
}

let systemState = {
    lineCheck: { confirmed: false, confirmedBy: null, confirmedAt: null },
    shift: { open: false, openedBy: null, openedAt: null }
};
if (fs.existsSync(STATE_FILE)) {
    try {
        systemState = JSON.parse(fs.readFileSync(STATE_FILE));
        console.log(">>> [INFO] –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.");
    } catch (error) {
        console.error(">>> [ERROR] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è state.json:", error);
    }
}

// --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const KITCHEN_CHAT_ID = '-1002389108118';
const MANAGER_TELEGRAM_ID = '2553122118';

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function saveState() {
    fs.writeFileSync(STATE_FILE, JSON.stringify(systemState, null, 2));
}

function logEvent(event) {
    const time = new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Moscow' });
    const logMessage = `[${time}] ${event}\n`;
    fs.appendFileSync(LOG_FILE, logMessage);
    console.log(logMessage.trim());
}

function getReplyOptions(msg) {
    const options = { parse_mode: 'Markdown' };
    if (msg?.is_topic_message && msg?.message_thread_id) {
        options.message_thread_id = msg.message_thread_id;
    }
    return options;
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ ---
function initializeBot(token) {
    const bot = new TelegramBot(token, { polling: false });

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

    bot.onText(/^—à–µ—Ñ/i, (msg) => {
        const chatId = msg.chat.id;
        const userName = msg.from.first_name || '–ü–æ–≤–∞—Ä';
        const shiftStatus = systemState.shift.open 
            ? `*–°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞* ‚úÖ (–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${systemState.shift.openedBy})`
            : `*–°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞* üîí`;

        const welcomeMessage = `*–°–ª—É—à–∞—é –≤–∞—Å, ${userName}!* üë®‚Äçüç≥\n\n${shiftStatus}\n\nüöÄ *–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:*`;
        const options = getReplyOptions(msg);
        options.reply_markup = {
            inline_keyboard: [
                [{ text: 'üìã –õ–∞–π–Ω-—á–µ–∫', callback_data: 'line_check' }],
                [{ text: 'üì∏ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–æ—Ç—á—ë—Ç', callback_data: 'send_photo_report' }],
                [{ text: 'üì¶ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', callback_data: 'send_request' }],
                [{ text: 'üîì –û—Ç–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã', callback_data: 'open_shift' }, { text: 'üîí –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–º–µ–Ω—ã', callback_data: 'close_shift' }],
                [{ text: 'üìñ –ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: 'show_today_menu' }],
                [{ text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–º–µ–Ω—ã', callback_data: 'show_stats' }]
            ]
        };
        bot.sendMessage(chatId, welcomeMessage, options);
    });

    bot.on('document', async (msg) => {
        if (msg.document.mime_type !== 'application/pdf') return;
        const chatId = msg.chat.id;
        bot.sendMessage(chatId, "‚è≥ –ü–æ–ª—É—á–∏–ª PDF, –Ω–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...");
        try {
            const fileId = msg.document.file_id;
            const fileLink = await bot.getFileLink(fileId);
            const response = await fetch(fileLink);
            const buffer = await response.arrayBuffer();
            const data = await pdfParse(Buffer.from(buffer));
            const lines = data.text.split('\n').filter(l => l.trim().length > 3);
            const dishes = lines.map(line => ({ name: line.trim(), description: "–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é" }));
            if (dishes.length === 0) {
                bot.sendMessage(chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –±–ª—é–¥–∞ –≤ PDF.");
                return;
            }
            const todayKey = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            dynamicMenu[todayKey] = { name: `–ò–º–ø–æ—Ä—Ç –∏–∑ PDF –æ—Ç ${new Date().toLocaleDateString('ru-RU')}`, dishes: dishes };
            fs.writeFileSync(MENU_FILE, JSON.stringify(dynamicMenu, null, 2));
            logEvent(`[MENU] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${msg.from.first_name} –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª ${dishes.length} –±–ª—é–¥ –Ω–∞ ${todayKey} —á–µ—Ä–µ–∑ PDF.`);
            bot.sendMessage(chatId, `‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ *${dishes.length}* –±–ª—é–¥ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. –ú–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!`, {parse_mode: 'Markdown'});
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF:", error);
            bot.sendMessage(chatId, "‚ùóÔ∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ PDF —Ñ–∞–π–ª–∞.");
        }
    });

    bot.on('callback_query', (cb) => {
        const msg = cb.message;
        const data = cb.data;
        const chatId = msg.chat.id;
        const options = getReplyOptions(msg);
        const user = cb.from.first_name;

        if (data === 'show_today_menu') {
            const todayKey = new Date().toLocaleDateString('en-US', { weekday: 'long' }).toLowerCase();
            const menu = dynamicMenu[todayKey];
            if (!menu || !menu.dishes) {
                bot.sendMessage(chatId, '‚ùó –ú–µ–Ω—é –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.', options);
            } else {
                let text = `üìñ *–ë–∏–∑–Ω–µ—Å-–ª–∞–Ω—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚Äî ${menu.name}*\n\n`;
                menu.dishes.forEach(b => {
                    text += `üçΩÔ∏è *${b.name}*\n_${b.description}_\n\n`;
                });
                bot.sendMessage(chatId, text, options);
            }
        } else if (data === 'open_shift') {
            systemState.shift = { open: true, openedBy: user, openedAt: new Date() };
            saveState();
            logEvent(`[SHIFT] –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user}.`);
            bot.sendMessage(chatId, `‚úÖ –°–º–µ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞ –≤ *${new Date(systemState.shift.openedAt).toLocaleTimeString('ru-RU')}*. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: ${user}.`, options);
        } else if (data === 'close_shift') {
            if (!systemState.shift.open) {
                bot.answerCallbackQuery(cb.id, { text: "–°–º–µ–Ω–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞.", show_alert: true });
                return;
            }
            const duration = Math.round((new Date() - new Date(systemState.shift.openedAt)) / 1000 / 60);
            logEvent(`[SHIFT] –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${user}. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω.`);
            bot.sendMessage(chatId, `üîí –°–º–µ–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∞. –í—Å–µ–º —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!`, options);
            systemState.shift.open = false;
            saveState();
        } else {
            bot.sendMessage(chatId, `–§—É–Ω–∫—Ü–∏—è "${data}" –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.`, options);
        }
        bot.answerCallbackQuery(cb.id);
    });

    // --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
    cron.schedule('0 6 * * 1-5', () => { // 09:00 –ú–°–ö
        logEvent("[CRON] –ó–∞–ø—É—Å–∫ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –õ–∞–π–Ω-—á–µ–∫–∞.");
        systemState.lineCheck = { confirmed: false, confirmedBy: null, confirmedAt: null };
        saveState();
        const message = `*–£—Ç—Ä–µ–Ω–Ω–∏–π –õ–∞–π–Ω-—á–µ–∫ (09:00)* ‚òÄÔ∏è\n\n–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∞! –ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–Ω—Ü–∏–∏. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.`;
        bot.sendMessage(KITCHEN_CHAT_ID, message, {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: [[{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å', callback_data: 'line_check_confirm' }]] }
        });
    }, { timezone: "Etc/UTC" });

    return bot;
}

module.exports = initializeBot;
