/*
 * –§–∞–π–ª: iiko-api.js
 * –û–ø–∏—Å–∞–Ω–∏–µ: –ú–æ–¥—É–ª—å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å API IIKO.
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –ø–æ–ª—É—á–µ–Ω–∏–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã, –æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤.
 */

const axios = require('axios');

// --- 1. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
const IIKO_API_LOGIN = process.env.IIKO_API_LOGIN;
const IIKO_ORGANIZATION_ID = process.env.IIKO_ORGANIZATION_ID;
const API_BASE_URL = 'https://api-ru.iiko.services/api/1';

let authToken = null;
let nomenclature = null; // –ö—ç—à –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã

if (!IIKO_API_LOGIN || !IIKO_ORGANIZATION_ID) {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è IIKO_API_LOGIN –∏ IIKO_ORGANIZATION_ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
}

// --- 2. –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è ---

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ API IIKO.
 * @returns {Promise<string>} –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–∫–µ–Ω.
 * @throws {Error} –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω.
 */
async function getAuthToken() {
    try {
        // –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä `apiLogin` –≤–º–µ—Å—Ç–æ `user_id`.
        const response = await axios.post(`${API_BASE_URL}/access_token`, {
            apiLogin: IIKO_API_LOGIN
        });
        console.log("–¢–æ–∫–µ–Ω IIKO —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω.");
        authToken = response.data.token; // –¢–æ–∫–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–æ–ª–µ `token`
        return authToken;
    } catch (error) {
        const errorMessage = error.response ? JSON.stringify(error.response.data) : error.message;
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ IIKO:", errorMessage);
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω IIKO: ${errorMessage}`);
    }
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–æ–¥—É–ª—å: –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ç–∞–π–º–µ—Ä –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
 * @throws {Error} –ï—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.
 */
async function initialize() {
    await getAuthToken(); // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω
    
    // –¢–æ–∫–µ–Ω IIKO –∂–∏–≤–µ—Ç 60 –º–∏–Ω—É—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 55 –º–∏–Ω—É—Ç.
    setInterval(getAuthToken, 55 * 60 * 1000);

    // –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∑–∏–º –∏ –∑–∞–∫—ç—à–∏—Ä—É–µ–º –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    await refreshNomenclature();
}

// --- 3. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ ---

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã (—Ç–æ–≤–∞—Ä—ã, –±–ª—é–¥–∞, –∑–∞–≥–æ—Ç–æ–≤–∫–∏).
 */
async function refreshNomenclature() {
    if (!authToken) {
        console.error("–ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.");
        return;
    }
    try {
        const response = await axios.post(`${API_BASE_URL}/nomenclature`, 
            { organizationIds: [IIKO_ORGANIZATION_ID] },
            { headers: { 'Authorization': `Bearer ${authToken}` } }
        );
        nomenclature = response.data;
        console.log(`–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${nomenclature.products.length} –ø—Ä–æ–¥—É–∫—Ç–æ–≤, ${nomenclature.dishes.length} –±–ª—é–¥.`);
    } catch (error) {
        const errorMessage = error.response ? JSON.stringify(error.response.data) : error.message;
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä—ã:", errorMessage);
    }
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –±–ª—é–¥–æ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ –ø–æ —á–∞—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏—è.
 * @param {string} query - –ß–∞—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è –±–ª—é–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞.
 * @returns {object|null} –ù–∞–π–¥–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–ª—é–¥–∞ –∏–ª–∏ null.
 */
function findDish(query) {
    if (!nomenclature) return null;
    const lowerCaseQuery = query.toLowerCase();
    return nomenclature.dishes.find(d => d.name.toLowerCase().includes(lowerCaseQuery));
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É (—Ä–µ—Ü–µ–ø—Ç) –¥–ª—è –±–ª—é–¥–∞.
 * @param {string} dishId - ID –±–ª—é–¥–∞.
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ—Ü–µ–ø—Ç–æ–º.
 */
function getRecipe(dishId) {
    if (!nomenclature) return "–ù–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.";
    
    const dish = nomenclature.dishes.find(d => d.id === dishId);
    if (!dish || !dish.assemblyCharts || dish.assemblyCharts.length === 0) {
        return "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è —ç—Ç–æ–≥–æ –±–ª—é–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.";
    }

    const chart = dish.assemblyCharts[0];
    let recipeText = `*–¢–µ—Ö. –∫–∞—Ä—Ç–∞ –¥–ª—è "${dish.name}" (–í—ã—Ö–æ–¥: ${chart.yield} –≥):*\n\n`;

    chart.items.forEach(item => {
        const product = nomenclature.products.find(p => p.id === item.productId);
        const productName = product ? product.name : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–¥—É–∫—Ç";
        recipeText += `‚Ä¢ *${productName}:* ${item.amount} ${product ? product.mainUnit : ''} (–Ω–µ—Ç—Ç–æ)\n`;
    });

    return recipeText;
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö.
 * @returns {Promise<string>} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –æ—Å—Ç–∞—Ç–∫–∞–º–∏.
 */
async function getStockReport() {
    if (!authToken) return "–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.";
    try {
        const response = await axios.post(`${API_BASE_URL}/reports/rest_stops`, 
            { organizationIds: [IIKO_ORGANIZATION_ID] },
            { headers: { 'Authorization': `Bearer ${authToken}` } }
        );
        
        const items = response.data.data;
        if (!items || items.length === 0) {
            return "–û—Å—Ç–∞—Ç–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Å–∫–ª–∞–¥—ã –ø—É—Å—Ç—ã.";
        }

        let reportText = "*–û—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö:*\n\n";
        items.forEach(item => {
            reportText += `‚Ä¢ *${item.name}:* ${item.amount} ${item.unit}\n`;
        });
        return reportText;

    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º:", error.response ? error.response.data : error.message);
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –ø–æ –æ—Å—Ç–∞—Ç–∫–∞–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
    }
}


// --- 4. –≠–∫—Å–ø–æ—Ä—Ç ---
module.exports = {
    initialize,
    findDish,
    getRecipe,
    getStockReport
};
```javascript:server.js
/*
 * –§–∞–π–ª: server.js
 * –û–ø–∏—Å–∞–Ω–∏–µ: –í–µ—Ä—Å–∏—è 2.2. –§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏.
 */

// --- 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ ---
const express = require("express");
const bodyParser = require("body-parser");
const TelegramBot = require("node-telegram-bot-api");
const cron = require("node-cron");
const iiko = require('./iiko-api');

// --- 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
const app = express();
app.use(bodyParser.json());

const token = process.env.TELEGRAM_TOKEN;
// –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: URL —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π.
const url = process.env.RENDER_EXTERNAL_URL || '[https://chef-mate-backend.onrender.com](https://chef-mate-backend.onrender.com)';

if (!token) {
  console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!");
  process.exit(1);
}

// –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –±–µ–∑ polling
const bot = new TelegramBot(token);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook
const webhookPath = `/telegram/webhook/${token}`;
bot.setWebHook(`${url}${webhookPath}`);
console.log(`Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –∞–¥—Ä–µ—Å: ${url}${webhookPath}`);

// --- 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª—è IIKO ---
iiko.initialize().then(() => {
    console.log("–ú–æ–¥—É–ª—å IIKO —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.");
}).catch(err => {
    console.error("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–ò –ú–û–î–£–õ–Ø IIKO:", err.message);
});

// --- 4. –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

// –ú—ã –¥–æ–ª–∂–Ω—ã —Å–ª—É—à–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram –Ω–∞ –Ω–∞—à webhook
app.post(webhookPath, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è message_thread_id –∫ –æ–ø—Ü–∏—è–º, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
const getReplyOptions = (msg) => {
    const options = { parse_mode: 'Markdown' };
    if (msg.is_topic_message && msg.message_thread_id) {
        options.message_thread_id = msg.message_thread_id;
    }
    return options;
};

// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ —Å–ª–æ–≤—É "–®–µ—Ñ" –∏–ª–∏ –∫–æ–º–∞–Ω–¥–µ /start
bot.onText(/^(—à–µ—Ñ|\/start)/i, (msg) => {
  const chatId = msg.chat.id;
  const userName = msg.from.first_name || '–ü–æ–≤–∞—Ä';
  const welcomeMessage = `*–°–ª—É—à–∞—é –≤–∞—Å, ${userName}!* üë®‚Äçüç≥\n\n–Ø –≤–∞—à —Ü–∏—Ñ—Ä–æ–≤–æ–π —Å—É-—à–µ—Ñ, –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –∫ IIKO. –ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n‚Ä¢ \`/recipe [–Ω–∞–∑–≤–∞–Ω–∏–µ]\` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Ö. –∫–∞—Ä—Ç—É.\n‚Ä¢ \`/stock\` - –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö.\n‚Ä¢ \`/help\` - –ü–æ–º–æ—â—å.`;
  const options = getReplyOptions(msg);
  bot.sendMessage(chatId, welcomeMessage, options);
});

// –ö–æ–º–∞–Ω–¥–∞ /recipe [–Ω–∞–∑–≤–∞–Ω–∏–µ]
bot.onText(/\/recipe (.+)/, (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    const options = getReplyOptions(msg);

    const foundDish = iiko.findDish(query);
    
    if (foundDish) {
        const recipe = iiko.getRecipe(foundDish.id);
        bot.sendMessage(chatId, recipe, options);
    } else {
        bot.sendMessage(chatId, `–ë–ª—é–¥–æ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ "${query}", –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–æ–º–µ–Ω–∫–ª–∞—Ç—É—Ä–µ IIKO.`, options);
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /stock
bot.onText(/\/stock/, async (msg) => {
    const chatId = msg.chat.id;
    const options = getReplyOptions(msg);
    bot.sendMessage(chatId, "–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ IIKO, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", options);
    
    const report = await iiko.getStockReport();
    bot.sendMessage(chatId, report, options);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.onText(/\/help/, (msg) => {
    sendHelpMessage(msg.chat.id, msg);
});


// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function sendHelpMessage(chatId, originalMsg) {
    const options = getReplyOptions(originalMsg);
    const helpMessage = `–Ø –∫ –≤–∞—à–∏–º —É—Å–ª—É–≥–∞–º! üë®‚Äçüç≥\n\n*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n- \`/recipe [–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞]\` - —è –Ω–∞–π–¥—É –±–ª—é–¥–æ –≤ IIKO –∏ –ø—Ä–∏—à–ª—é –µ–≥–æ —Ç–µ—Ö. –∫–∞—Ä—Ç—É.\n- \`/stock\` - —è –∑–∞–ø—Ä–æ—à—É –≤ IIKO –∏ –ø–æ–∫–∞–∂—É –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–∞—Ö.\n\n_–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: —è –∏—â—É –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é, –Ω–∞–ø—Ä–∏–º–µ—Ä, \`/recipe –ª–∞–∑–∞–Ω—å—è\`._`;
    bot.sendMessage(chatId, helpMessage, options);
}


// --- 5. –ü—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫) ---
const KITCHEN_CHAT_ID = process.env.KITCHEN_CHAT_ID || '-2389108118';
let lineCheckState = { confirmed: false, messageId: null };

const scheduleConfig = [
    {
        cronTime: '0 6 * * 1-5', // 09:00 –ú–°–ö (UTC+3)
        message: `*–£—Ç—Ä–µ–Ω–Ω–∏–π –õ–∞–π–Ω-—á–µ–∫ (09:00)* ‚òÄÔ∏è\n\n–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ–º–∞–Ω–¥–∞! –ü–æ—Ä–∞ –Ω–∞—á–∏–Ω–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞–Ω—Ü–∏–∏. –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å.\n\n–¢–∞–∫–∂–µ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ *—Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å –õ–∞–π–Ω-—á–µ–∫* —Å –∑–∞–≥–æ—Ç–æ–≤–æ—á–Ω—ã–º –ª–∏—Å—Ç–æ–º —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∞–π—Ç–∞ KMS.`,
        options: {
            reply_markup: {
                inline_keyboard: [[{ text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å', callback_data: 'line_check_confirm' }]]
            },
            parse_mode: 'Markdown'
        },
        action: (message) => {
            lineCheckState.confirmed = false;
            lineCheckState.messageId = message.message_id;
        }
    },
];

scheduleConfig.forEach(job => {
    cron.schedule(job.cronTime, async () => {
        try {
            const sentMessage = await bot.sendMessage(KITCHEN_CHAT_ID, job.message, job.options);
            if (job.action) {
                job.action(sentMessage);
            }
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
        }
    }, {
        timezone: "Europe/Moscow"
    });
});

console.log("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.");


// --- 6. –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ ---
const listener = app.listen(process.env.PORT || 3000, () => {
  console.log("–°–µ—Ä–≤–µ—Ä v2.2 (IIKO + Webhook) –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç " + listener.address().port);
});
